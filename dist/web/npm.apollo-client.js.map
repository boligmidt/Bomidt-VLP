{"version":3,"sources":["webpack:///./node_modules/apollo-client/bundle.esm.js"],"names":["NetworkStatus","isNetworkRequestInFlight","networkStatus","Observable","_super","apply","this","arguments","prototype","isNonEmptyArray","value","Array","isArray","length","FetchType","generateErrorMessage","err","message","graphQLErrors","forEach","graphQLError","errorMessage","networkError","replace","ApolloError","_a","extraInfo","_this","call","__proto__","Error","ObservableQuery","queryManager","options","_b","shouldSubscribe","observer","onSubscribe","observers","Set","subscriptions","isTornDown","variables","queryId","generateQueryId","opDef","query","queryName","name","result","Promise","resolve","reject","next","delete","size","removeQuery","setTimeout","subscription","unsubscribe","error","subscribe","currentResult","getCurrentResult","undefined","data","lastResult","lastError","loading","storeValue","policy","getCurrentQueryResult","partial","queryStoreValue","queryStore","get","fetchPolicy","isNetworkFetchPolicy","errorPolicy","errors","ready","updateLastResult","stale","isDifferentFromLastResult","newResult","snapshot","lastResultSnapshot","getLastResult","getLastError","resetLastResults","resetQueryStoreErrors","refetch","fetchQuery","fetchMore","fetchMoreOptions","updateQuery","combinedOptions","qid","normal","then","fetchMoreResult","previousResult","stopQuery","subscribeToMore","startGraphQLSubscription","document","subscriptionData","previous","onError","add","setOptions","opts","oldFetchPolicy","pollInterval","startPolling","stopPolling","setVariables","fetchResults","tryFetch","mapFn","getQueryWithPreviousResult","dataStore","markUpdateQueryResult","broadcastQueries","stopPollingQuery","assertNotCacheFirstOrOnly","startPollingQuery","assumeImmutableResults","subObserver","_subscription","_observer","defaultSubscriptionObserverErrorCallback","first","setUpQuery","tearDownQuery","addObservableQuery","iterateObserversSafely","observeQuery","previousResult_1","query_1","fetchPolicy_1","transform","hasClientExports","getLocalState","addExportedVariables","previousVariables","serverQuery","catch","sub","clear","removeObservableQuery","method","argument","observersWithMethod","obs","push","obsQuery","MutationStore","store","getStore","mutationId","initMutation","mutation","markMutationError","markMutationResult","reset","QueryStore","initQuery","previousQuery","isSetVariables","storePreviousVariables","isPoll","poll","isRefetch","metadata","fetchMoreForQueryId","markQueryResult","markQueryError","markQueryResultClient","complete","observableQueryIds","Object","keys","indexOf","LocalState","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","resolverGroup","setResolvers","getResolvers","runResolvers","remoteResult","context","onlyRunForcedResolvers","_c","resolveDocument","localResult","getFragmentMatcher","clientQuery","prepareContext","getCacheKey","obj","config","dataIdFromObject","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","Directive","enter","node","some","arg","kind","diff","returnPartialData","optimistic","rootValue","mainDefinition","fragments","fragmentMap","definitionOperation","defaultOperationType","execContext","str","operation","charAt","toUpperCase","slice","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","fragment","typeCondition","resolveField","fieldResult","fragmentResult","all","selections","map","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolverType","resolverMap","__typename","directives","directive","resolveSubSelectedArray","item","multiplex","inner","hasOwnProperty","QueryManager","link","queryDeduplication","onBroadcast","_d","ssrMode","_e","clientAwareness","localState","mutationStore","idCounter","queries","Map","fetchQueryRejectFns","transformCache","WeakMap","inFlightLinkObservables","pollingInfoByQueryId","getCache","stop","_info","stopQueryNoBroadcast","mutate","optimisticResponse","updateQueriesByName","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","generateUpdateQueriesInfo","self","_f","label","setQuery","getVariables","sent","ret","observableQuery","updater","markMutationInit","storeResult","getObservableFromLink","markMutationComplete","refetchQueryPromises","refetchQuery","queryOptions","fetchType","isNetworkOnly","needToFetch","shouldFetch","requestId","cancel","networkResult","updateQueryWatch","lastRequestId","invalidated","invalidate","fetchRequest","getQuery","hasForcedResolvers","newData","queryListenerForObserver","invoke","e","networkStatusChanged","shouldNotifyIfLoading","notifyOnNetworkStatusChange","hasGraphQLErrors","isMissing","errorStatusChanged","diffResult","resultFromStore","has","transformed","transformDocument","forLink","transformForLink","cacheEntry_1","defaultVars","doc","set","watchQuery","transformedOptions","watchedQuery","String","stopQueryInStore","stopQueryInStoreNoBroadcast","addQueryListener","listener","listeners","watch","callback","clearStore","resetIds","resetStore","reFetchObservableQueries","includeStandby","observableQueryPromises","startQuery","makeObservable","markSubscriptionResult","observablePromise_1","observable","x","queryIdOrObservable","foundObserveableQuery","info","id","deduplication","inFlightLinkObservables_1","operationName","forceFetch","byVariables_1","varJson_1","JSON","stringify","cleanup","cleanupSub_1","of","activeNextCount","completed","handler","asyncMap","errorsFromStore","fqrfId","result_1","prev","newInfo","newContext","checkInFlight","interval","maybeFetch_1","poll_1","clearTimeout","timeout","DataStore","initialCache","ignoreErrors","writeWithErrors","write","dataId","optimistic_1","recordOptimisticTransaction","c","orig","cacheWrites_1","updateQueries_1","currentQueryResult","nextQueryResult","mutationResult","queryVariables","performTransaction","removeOptimistic","version","ApolloClient","defaultOptions","resetStoreCallbacks","clearStoreCallbacks","ssrForceFetchDelay","connectToDevTools","typeDefs","clientAwarenessName","clientAwarenessVersion","empty","disableNetworkFetches","bind","window","__APOLLO_CLIENT__","devToolsHookCb","action","state","mutations","dataWithOptimisticResults","extract","readQuery","readFragment","writeQuery","writeFragment","writeData","__actionHookForDevTools","cb","__requestRaw","payload","initQueryManager","fn","onResetStore","filter","onClearStore","restore","serializedState","setLocalStateFragmentMatcher"],"mappings":"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","file":"npm.apollo-client.js","sourcesContent":["import { __extends, __assign, __awaiter, __generator } from 'tslib';\nimport { getOperationDefinition, isEqual, tryFunctionOrLogError, cloneDeep, mergeDeep, hasDirectives, removeClientSetsFromDocument, buildQueryFromSelectionSet, getMainDefinition, getFragmentDefinitions, createFragmentMap, mergeDeepArray, resultKeyNameFromField, argumentsObjectFromField, shouldInclude, isField, isInlineFragment, canUseWeakMap, graphQLResultHasError, removeConnectionDirectiveFromDocument, hasClientExports, getDefaultValues, getOperationName } from 'apollo-utilities';\nimport { Observable as Observable$1, execute, ApolloLink } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { visit, BREAK } from 'graphql/language/visitor';\n\nvar NetworkStatus;\n(function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nfunction isNetworkRequestInFlight(networkStatus) {\n    return networkStatus < 7;\n}\n\nvar Observable = (function (_super) {\n    __extends(Observable, _super);\n    function Observable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Observable.prototype[$$observable] = function () {\n        return this;\n    };\n    Observable.prototype['@@observable'] = function () {\n        return this;\n    };\n    return Observable;\n}(Observable$1));\n\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\n\nfunction isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n    var message = '';\n    if (isNonEmptyArray(err.graphQLErrors)) {\n        err.graphQLErrors.forEach(function (graphQLError) {\n            var errorMessage = graphQLError\n                ? graphQLError.message\n                : 'Error message not found.';\n            message += \"GraphQL error: \" + errorMessage + \"\\n\";\n        });\n    }\n    if (err.networkError) {\n        message += 'Network error: ' + err.networkError.message + '\\n';\n    }\n    message = message.replace(/\\n$/, '');\n    return message;\n};\nvar ApolloError = (function (_super) {\n    __extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.networkError = networkError || null;\n        if (!errorMessage) {\n            _this.message = generateErrorMessage(_this);\n        }\n        else {\n            _this.message = errorMessage;\n        }\n        _this.extraInfo = extraInfo;\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\n\nvar FetchType;\n(function (FetchType) {\n    FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n    FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n    FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\n\nvar hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue && (storeValue.networkError ||\n        (policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors)));\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.variables = options.variables || {};\n        _this.queryId = queryManager.generateQueryId();\n        _this.shouldSubscribe = shouldSubscribe;\n        var opDef = getOperationDefinition(options.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        _this.queryManager = queryManager;\n        return _this;\n    }\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.currentResult = function () {\n        var result = this.getCurrentResult();\n        if (result.data === undefined) {\n            result.data = {};\n        }\n        return result;\n    };\n    ObservableQuery.prototype.getCurrentResult = function () {\n        if (this.isTornDown) {\n            var lastResult = this.lastResult;\n            return {\n                data: !this.lastError && lastResult && lastResult.data || void 0,\n                error: this.lastError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n            };\n        }\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;\n        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n        var result;\n        var fetchPolicy = this.options.fetchPolicy;\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' ||\n            fetchPolicy === 'no-cache';\n        if (queryStoreValue) {\n            var networkStatus = queryStoreValue.networkStatus;\n            if (hasError(queryStoreValue, this.options.errorPolicy)) {\n                return {\n                    data: void 0,\n                    loading: false,\n                    networkStatus: networkStatus,\n                    error: new ApolloError({\n                        graphQLErrors: queryStoreValue.graphQLErrors,\n                        networkError: queryStoreValue.networkError,\n                    }),\n                };\n            }\n            if (queryStoreValue.variables) {\n                this.options.variables = __assign({}, this.options.variables, queryStoreValue.variables);\n                this.variables = this.options.variables;\n            }\n            result = {\n                data: data,\n                loading: isNetworkRequestInFlight(networkStatus),\n                networkStatus: networkStatus,\n            };\n            if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n                result.errors = queryStoreValue.graphQLErrors;\n            }\n        }\n        else {\n            var loading = isNetworkFetchPolicy ||\n                (partial && fetchPolicy !== 'cache-only');\n            result = {\n                data: data,\n                loading: loading,\n                networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready,\n            };\n        }\n        if (!partial) {\n            this.updateLastResult(__assign({}, result, { stale: false }));\n        }\n        return __assign({}, result, { partial: partial });\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        var snapshot = this.lastResultSnapshot;\n        return !(snapshot &&\n            newResult &&\n            snapshot.networkStatus === newResult.networkStatus &&\n            snapshot.stale === newResult.stale &&\n            isEqual(snapshot.data, newResult.data));\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        var queryStore = this.queryManager.queryStore.get(this.queryId);\n        if (queryStore) {\n            queryStore.networkError = null;\n            queryStore.graphQLErrors = [];\n        }\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(3) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (fetchPolicy !== 'no-cache' &&\n            fetchPolicy !== 'cache-and-network') {\n            fetchPolicy = 'network-only';\n        }\n        if (!isEqual(this.variables, variables)) {\n            this.variables = __assign({}, this.variables, variables);\n        }\n        if (!isEqual(this.options.variables, this.variables)) {\n            this.options.variables = __assign({}, this.options.variables, this.variables);\n        }\n        return this.queryManager.fetchQuery(this.queryId, __assign({}, this.options, { fetchPolicy: fetchPolicy }), FetchType.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(fetchMoreOptions.updateQuery, 4) : invariant(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n        var combinedOptions = __assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign({}, this.options, fetchMoreOptions, { variables: __assign({}, this.variables, fetchMoreOptions.variables) })), { fetchPolicy: 'network-only' });\n        var qid = this.queryManager.generateQueryId();\n        return this.queryManager\n            .fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId)\n            .then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                return fetchMoreOptions.updateQuery(previousResult, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables,\n                });\n            });\n            _this.queryManager.stopQuery(qid);\n            return fetchMoreResult;\n        }, function (error) {\n            _this.queryManager.stopQuery(qid);\n            throw error;\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (opts) {\n        var oldFetchPolicy = this.options.fetchPolicy;\n        this.options = __assign({}, this.options, opts);\n        if (opts.pollInterval) {\n            this.startPolling(opts.pollInterval);\n        }\n        else if (opts.pollInterval === 0) {\n            this.stopPolling();\n        }\n        var fetchPolicy = opts.fetchPolicy;\n        return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === 'cache-only' ||\n            oldFetchPolicy === 'standby' ||\n            fetchPolicy === 'network-only'), opts.fetchResults);\n    };\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n        if (tryFetch === void 0) { tryFetch = false; }\n        if (fetchResults === void 0) { fetchResults = true; }\n        this.isTornDown = false;\n        variables = variables || this.variables;\n        if (!tryFetch && isEqual(variables, this.variables)) {\n            return this.observers.size && fetchResults\n                ? this.result()\n                : Promise.resolve();\n        }\n        this.variables = this.options.variables = variables;\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.queryManager.fetchQuery(this.queryId, this.options);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var queryManager = this.queryManager;\n        var _a = queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;\n        var newResult = tryFunctionOrLogError(function () {\n            return mapFn(previousResult, { variables: variables });\n        });\n        if (newResult) {\n            queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.queryManager.stopPollingQuery(this.queryId);\n        this.options.pollInterval = undefined;\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        assertNotCacheFirstOrOnly(this);\n        this.options.pollInterval = pollInterval;\n        this.queryManager.startPollingQuery(this.options, this.queryId);\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult) {\n        var previousResult = this.lastResult;\n        this.lastResult = newResult;\n        this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n            ? newResult\n            : cloneDeep(newResult);\n        return previousResult;\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        try {\n            var subObserver = observer._subscription._observer;\n            if (subObserver && !subObserver.error) {\n                subObserver.error = defaultSubscriptionObserverErrorCallback;\n            }\n        }\n        catch (_a) { }\n        var first = !this.observers.size;\n        this.observers.add(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (first) {\n            this.setUpQuery();\n        }\n        return function () {\n            if (_this.observers.delete(observer) && !_this.observers.size) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.setUpQuery = function () {\n        var _this = this;\n        var _a = this, queryManager = _a.queryManager, queryId = _a.queryId;\n        if (this.shouldSubscribe) {\n            queryManager.addObservableQuery(queryId, this);\n        }\n        if (this.options.pollInterval) {\n            assertNotCacheFirstOrOnly(this);\n            queryManager.startPollingQuery(this.options, queryId);\n        }\n        var onError = function (error) {\n            _this.updateLastResult(__assign({}, _this.lastResult, { errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false }));\n            iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n        };\n        queryManager.observeQuery(queryId, this.options, {\n            next: function (result) {\n                if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n                    var previousResult_1 = _this.updateLastResult(result);\n                    var _a = _this.options, query_1 = _a.query, variables = _a.variables, fetchPolicy_1 = _a.fetchPolicy;\n                    if (queryManager.transform(query_1).hasClientExports) {\n                        queryManager.getLocalState().addExportedVariables(query_1, variables).then(function (variables) {\n                            var previousVariables = _this.variables;\n                            _this.variables = _this.options.variables = variables;\n                            if (!result.loading &&\n                                previousResult_1 &&\n                                fetchPolicy_1 !== 'cache-only' &&\n                                queryManager.transform(query_1).serverQuery &&\n                                !isEqual(previousVariables, variables)) {\n                                _this.refetch();\n                            }\n                            else {\n                                iterateObserversSafely(_this.observers, 'next', result);\n                            }\n                        });\n                    }\n                    else {\n                        iterateObserversSafely(_this.observers, 'next', result);\n                    }\n                }\n            },\n            error: onError,\n        }).catch(onError);\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        var queryManager = this.queryManager;\n        this.isTornDown = true;\n        queryManager.stopPollingQuery(this.queryId);\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        queryManager.removeObservableQuery(this.queryId);\n        queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n    };\n    return ObservableQuery;\n}(Observable));\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}\nfunction iterateObserversSafely(observers, method, argument) {\n    var observersWithMethod = [];\n    observers.forEach(function (obs) { return obs[method] && observersWithMethod.push(obs); });\n    observersWithMethod.forEach(function (obs) { return obs[method](argument); });\n}\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n    var fetchPolicy = obsQuery.options.fetchPolicy;\n    process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 5) : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\n\nvar MutationStore = (function () {\n    function MutationStore() {\n        this.store = {};\n    }\n    MutationStore.prototype.getStore = function () {\n        return this.store;\n    };\n    MutationStore.prototype.get = function (mutationId) {\n        return this.store[mutationId];\n    };\n    MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n        this.store[mutationId] = {\n            mutation: mutation,\n            variables: variables || {},\n            loading: true,\n            error: null,\n        };\n    };\n    MutationStore.prototype.markMutationError = function (mutationId, error) {\n        var mutation = this.store[mutationId];\n        if (mutation) {\n            mutation.loading = false;\n            mutation.error = error;\n        }\n    };\n    MutationStore.prototype.markMutationResult = function (mutationId) {\n        var mutation = this.store[mutationId];\n        if (mutation) {\n            mutation.loading = false;\n            mutation.error = null;\n        }\n    };\n    MutationStore.prototype.reset = function () {\n        this.store = {};\n    };\n    return MutationStore;\n}());\n\nvar QueryStore = (function () {\n    function QueryStore() {\n        this.store = {};\n    }\n    QueryStore.prototype.getStore = function () {\n        return this.store;\n    };\n    QueryStore.prototype.get = function (queryId) {\n        return this.store[queryId];\n    };\n    QueryStore.prototype.initQuery = function (query) {\n        var previousQuery = this.store[query.queryId];\n        process.env.NODE_ENV === \"production\" ? invariant(!previousQuery ||\n            previousQuery.document === query.document ||\n            isEqual(previousQuery.document, query.document), 19) : invariant(!previousQuery ||\n            previousQuery.document === query.document ||\n            isEqual(previousQuery.document, query.document), 'Internal Error: may not update existing query string in store');\n        var isSetVariables = false;\n        var previousVariables = null;\n        if (query.storePreviousVariables &&\n            previousQuery &&\n            previousQuery.networkStatus !== NetworkStatus.loading) {\n            if (!isEqual(previousQuery.variables, query.variables)) {\n                isSetVariables = true;\n                previousVariables = previousQuery.variables;\n            }\n        }\n        var networkStatus;\n        if (isSetVariables) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = NetworkStatus.poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = NetworkStatus.refetch;\n        }\n        else {\n            networkStatus = NetworkStatus.loading;\n        }\n        var graphQLErrors = [];\n        if (previousQuery && previousQuery.graphQLErrors) {\n            graphQLErrors = previousQuery.graphQLErrors;\n        }\n        this.store[query.queryId] = {\n            document: query.document,\n            variables: query.variables,\n            previousVariables: previousVariables,\n            networkError: null,\n            graphQLErrors: graphQLErrors,\n            networkStatus: networkStatus,\n            metadata: query.metadata,\n        };\n        if (typeof query.fetchMoreForQueryId === 'string' &&\n            this.store[query.fetchMoreForQueryId]) {\n            this.store[query.fetchMoreForQueryId].networkStatus =\n                NetworkStatus.fetchMore;\n        }\n    };\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = NetworkStatus.ready;\n        if (typeof fetchMoreForQueryId === 'string' &&\n            this.store[fetchMoreForQueryId]) {\n            this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n        }\n    };\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = error;\n        this.store[queryId].networkStatus = NetworkStatus.error;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.markQueryResultClient(fetchMoreForQueryId, true);\n        }\n    };\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n        var storeValue = this.store && this.store[queryId];\n        if (storeValue) {\n            storeValue.networkError = null;\n            storeValue.previousVariables = null;\n            if (complete) {\n                storeValue.networkStatus = NetworkStatus.ready;\n            }\n        }\n    };\n    QueryStore.prototype.stopQuery = function (queryId) {\n        delete this.store[queryId];\n    };\n    QueryStore.prototype.reset = function (observableQueryIds) {\n        var _this = this;\n        Object.keys(this.store).forEach(function (queryId) {\n            if (observableQueryIds.indexOf(queryId) < 0) {\n                _this.stopQuery(queryId);\n            }\n            else {\n                _this.store[queryId].networkStatus = NetworkStatus.loading;\n            }\n        });\n    };\n    return QueryStore;\n}());\n\nfunction capitalizeFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign({}, remoteResult, { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n            process.env.NODE_ENV === \"production\" || invariant.warn('Found @client directives in a query but no ApolloClient resolvers ' +\n                'were specified. This means ApolloClient local resolver handling ' +\n                'has been disabled, and @client directives will be passed through ' +\n                'to your link chain.');\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return this.resolvers ? removeClientSetsFromDocument(document) : document;\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var cache = this.cache;\n        var newContext = __assign({}, context, { cache: cache, getCacheKey: function (obj) {\n                if (cache.config) {\n                    return cache.config.dataIdFromObject(obj);\n                }\n                else {\n                    process.env.NODE_ENV === \"production\" ? invariant(false, 6) : invariant(false, 'To use context.getCacheKey, you need to use a cache that has ' +\n                        'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n                }\n            } });\n        return newContext;\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign({}, variables, data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                definitionOperation = mainDefinition\n                    .operation;\n                defaultOperationType = definitionOperation\n                    ? capitalizeFirstLetter(definitionOperation)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign({}, context, { cache: cache,\n                        client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            process.env.NODE_ENV === \"production\" ? invariant(fragment, 7) : invariant(fragment, \"No fragment named \" + selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field: field }));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n            }\n        }));\n    };\n    return LocalState;\n}());\n\nfunction multiplex(inner) {\n    var observers = new Set();\n    var sub = null;\n    return new Observable(function (observer) {\n        observers.add(observer);\n        sub = sub || inner.subscribe({\n            next: function (value) {\n                observers.forEach(function (obs) { return obs.next && obs.next(value); });\n            },\n            error: function (error) {\n                observers.forEach(function (obs) { return obs.error && obs.error(error); });\n            },\n            complete: function () {\n                observers.forEach(function (obs) { return obs.complete && obs.complete(); });\n            },\n        });\n        return function () {\n            if (observers.delete(observer) && !observers.size && sub) {\n                sub.unsubscribe();\n                sub = null;\n            }\n        };\n    });\n}\nfunction asyncMap(observable, mapFn) {\n    return new Observable(function (observer) {\n        var next = observer.next, error = observer.error, complete = observer.complete;\n        var activeNextCount = 0;\n        var completed = false;\n        var handler = {\n            next: function (value) {\n                ++activeNextCount;\n                new Promise(function (resolve) {\n                    resolve(mapFn(value));\n                }).then(function (result) {\n                    --activeNextCount;\n                    next && next.call(observer, result);\n                    completed && handler.complete();\n                }, function (e) {\n                    --activeNextCount;\n                    error && error.call(observer, e);\n                });\n            },\n            error: function (e) {\n                error && error.call(observer, e);\n            },\n            complete: function () {\n                completed = true;\n                if (!activeNextCount) {\n                    complete && complete.call(observer);\n                }\n            },\n        };\n        var sub = observable.subscribe(handler);\n        return function () { return sub.unsubscribe(); };\n    });\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a.store, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.mutationStore = new MutationStore();\n        this.queryStore = new QueryStore();\n        this.clientAwareness = {};\n        this.idCounter = 1;\n        this.queries = new Map();\n        this.fetchQueryRejectFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.inFlightLinkObservables = new Map();\n        this.pollingInfoByQueryId = new Map();\n        this.link = link;\n        this.queryDeduplication = queryDeduplication;\n        this.dataStore = store;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: store.getCache() });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(process.env.NODE_ENV === \"production\" ? new InvariantError(8) : new InvariantError('QueryManager stopped while query was in flight'));\n        });\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, generateUpdateQueriesInfo, self;\n            var _this = this;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        process.env.NODE_ENV === \"production\" ? invariant(mutation, 9) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 10) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n                        mutationId = this.generateQueryId();\n                        mutation = this.transform(mutation).document;\n                        this.setQuery(mutationId, function () { return ({ document: mutation }); });\n                        variables = this.getVariables(mutation, variables);\n                        if (!this.transform(mutation).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        generateUpdateQueriesInfo = function () {\n                            var ret = {};\n                            if (updateQueriesByName) {\n                                _this.queries.forEach(function (_a, queryId) {\n                                    var observableQuery = _a.observableQuery;\n                                    if (observableQuery) {\n                                        var queryName = observableQuery.queryName;\n                                        if (queryName &&\n                                            hasOwnProperty.call(updateQueriesByName, queryName)) {\n                                            ret[queryId] = {\n                                                updater: updateQueriesByName[queryName],\n                                                query: _this.queryStore.get(queryId),\n                                            };\n                                        }\n                                    }\n                                });\n                            }\n                            return ret;\n                        };\n                        this.mutationStore.initMutation(mutationId, mutation, variables);\n                        this.dataStore.markMutationInit({\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: variables,\n                            updateQueries: generateUpdateQueriesInfo(),\n                            update: updateWithProxyFn,\n                            optimisticResponse: optimisticResponse,\n                        });\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                self.getObservableFromLink(mutation, __assign({}, context, { optimisticResponse: optimisticResponse }), variables, false).subscribe({\n                                    next: function (result) {\n                                        if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                            error = new ApolloError({\n                                                graphQLErrors: result.errors,\n                                            });\n                                            return;\n                                        }\n                                        self.mutationStore.markMutationResult(mutationId);\n                                        if (fetchPolicy !== 'no-cache') {\n                                            self.dataStore.markMutationResult({\n                                                mutationId: mutationId,\n                                                result: result,\n                                                document: mutation,\n                                                variables: variables,\n                                                updateQueries: generateUpdateQueriesInfo(),\n                                                update: updateWithProxyFn,\n                                            });\n                                        }\n                                        storeResult = result;\n                                    },\n                                    error: function (err) {\n                                        self.mutationStore.markMutationError(mutationId, err);\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        self.setQuery(mutationId, function () { return ({ document: null }); });\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (error) {\n                                            self.mutationStore.markMutationError(mutationId, error);\n                                        }\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        if (error) {\n                                            reject(error);\n                                            return;\n                                        }\n                                        if (typeof refetchQueries === 'function') {\n                                            refetchQueries = refetchQueries(storeResult);\n                                        }\n                                        var refetchQueryPromises = [];\n                                        if (isNonEmptyArray(refetchQueries)) {\n                                            refetchQueries.forEach(function (refetchQuery) {\n                                                if (typeof refetchQuery === 'string') {\n                                                    self.queries.forEach(function (_a) {\n                                                        var observableQuery = _a.observableQuery;\n                                                        if (observableQuery &&\n                                                            observableQuery.queryName === refetchQuery) {\n                                                            refetchQueryPromises.push(observableQuery.refetch());\n                                                        }\n                                                    });\n                                                }\n                                                else {\n                                                    var queryOptions = {\n                                                        query: refetchQuery.query,\n                                                        variables: refetchQuery.variables,\n                                                        fetchPolicy: 'network-only',\n                                                    };\n                                                    if (refetchQuery.context) {\n                                                        queryOptions.context = refetchQuery.context;\n                                                    }\n                                                    refetchQueryPromises.push(self.query(queryOptions));\n                                                }\n                                            });\n                                        }\n                                        Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                            self.setQuery(mutationId, function () { return ({ document: null }); });\n                                            if (errorPolicy === 'ignore' &&\n                                                storeResult &&\n                                                graphQLResultHasError(storeResult)) {\n                                                delete storeResult.errors;\n                                            }\n                                            resolve(storeResult);\n                                        });\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, metadata, _b, fetchPolicy, _c, context, query, variables, storeResult, isNetworkOnly, needToFetch, _d, complete, result, shouldFetch, requestId, cancel, networkResult;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _a = options.metadata, metadata = _a === void 0 ? null : _a, _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? 'cache-first' : _b, _c = options.context, context = _c === void 0 ? {} : _c;\n                        query = this.transform(options.query).document;\n                        variables = this.getVariables(query, options.variables);\n                        if (!this.transform(query).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(query, variables, context)];\n                    case 1:\n                        variables = _e.sent();\n                        _e.label = 2;\n                    case 2:\n                        options = __assign({}, options, { variables: variables });\n                        isNetworkOnly = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n                        needToFetch = isNetworkOnly;\n                        if (!isNetworkOnly) {\n                            _d = this.dataStore.getCache().diff({\n                                query: query,\n                                variables: variables,\n                                returnPartialData: true,\n                                optimistic: false,\n                            }), complete = _d.complete, result = _d.result;\n                            needToFetch = !complete || fetchPolicy === 'cache-and-network';\n                            storeResult = result;\n                        }\n                        shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n                        if (hasDirectives(['live'], query))\n                            shouldFetch = true;\n                        requestId = this.idCounter++;\n                        cancel = fetchPolicy !== 'no-cache'\n                            ? this.updateQueryWatch(queryId, query, options)\n                            : undefined;\n                        this.setQuery(queryId, function () { return ({\n                            document: query,\n                            lastRequestId: requestId,\n                            invalidated: true,\n                            cancel: cancel,\n                        }); });\n                        this.invalidate(fetchMoreForQueryId);\n                        this.queryStore.initQuery({\n                            queryId: queryId,\n                            document: query,\n                            storePreviousVariables: shouldFetch,\n                            variables: variables,\n                            isPoll: fetchType === FetchType.poll,\n                            isRefetch: fetchType === FetchType.refetch,\n                            metadata: metadata,\n                            fetchMoreForQueryId: fetchMoreForQueryId,\n                        });\n                        this.broadcastQueries();\n                        if (shouldFetch) {\n                            networkResult = this.fetchRequest({\n                                requestId: requestId,\n                                queryId: queryId,\n                                document: query,\n                                options: options,\n                                fetchMoreForQueryId: fetchMoreForQueryId,\n                            }).catch(function (error) {\n                                if (isApolloError(error)) {\n                                    throw error;\n                                }\n                                else {\n                                    if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                                        _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                                        _this.invalidate(queryId);\n                                        _this.invalidate(fetchMoreForQueryId);\n                                        _this.broadcastQueries();\n                                    }\n                                    throw new ApolloError({ networkError: error });\n                                }\n                            });\n                            if (fetchPolicy !== 'cache-and-network') {\n                                return [2, networkResult];\n                            }\n                            networkResult.catch(function () { });\n                        }\n                        this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n                        this.invalidate(queryId);\n                        this.invalidate(fetchMoreForQueryId);\n                        if (this.transform(query).hasForcedResolvers) {\n                            return [2, this.localState.runResolvers({\n                                    document: query,\n                                    remoteResult: { data: storeResult },\n                                    context: context,\n                                    variables: variables,\n                                    onlyRunForcedResolvers: true,\n                                }).then(function (result) {\n                                    _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n                                    _this.broadcastQueries();\n                                    return result;\n                                })];\n                        }\n                        this.broadcastQueries();\n                        return [2, { data: storeResult }];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markQueryResult = function (queryId, result, _a, fetchMoreForQueryId) {\n        var fetchPolicy = _a.fetchPolicy, variables = _a.variables, errorPolicy = _a.errorPolicy;\n        if (fetchPolicy === 'no-cache') {\n            this.setQuery(queryId, function () { return ({\n                newData: { result: result.data, complete: true },\n            }); });\n        }\n        else {\n            this.dataStore.markQueryResult(result, this.getQuery(queryId).document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n        }\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n        var _this = this;\n        function invoke(method, argument) {\n            if (observer[method]) {\n                try {\n                    observer[method](argument);\n                }\n                catch (e) {\n                    process.env.NODE_ENV === \"production\" || invariant.error(e);\n                }\n            }\n            else if (method === 'error') {\n                process.env.NODE_ENV === \"production\" || invariant.error(argument);\n            }\n        }\n        return function (queryStoreValue, newData) {\n            _this.invalidate(queryId, false);\n            if (!queryStoreValue)\n                return;\n            var _a = _this.getQuery(queryId), observableQuery = _a.observableQuery, document = _a.document;\n            var fetchPolicy = observableQuery\n                ? observableQuery.options.fetchPolicy\n                : options.fetchPolicy;\n            if (fetchPolicy === 'standby')\n                return;\n            var loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);\n            var lastResult = observableQuery && observableQuery.getLastResult();\n            var networkStatusChanged = !!(lastResult &&\n                lastResult.networkStatus !== queryStoreValue.networkStatus);\n            var shouldNotifyIfLoading = options.returnPartialData ||\n                (!newData && queryStoreValue.previousVariables) ||\n                (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n                fetchPolicy === 'cache-only' ||\n                fetchPolicy === 'cache-and-network';\n            if (loading && !shouldNotifyIfLoading) {\n                return;\n            }\n            var hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);\n            var errorPolicy = observableQuery\n                && observableQuery.options.errorPolicy\n                || options.errorPolicy\n                || 'none';\n            if (errorPolicy === 'none' && hasGraphQLErrors || queryStoreValue.networkError) {\n                return invoke('error', new ApolloError({\n                    graphQLErrors: queryStoreValue.graphQLErrors,\n                    networkError: queryStoreValue.networkError,\n                }));\n            }\n            try {\n                var data = void 0;\n                var isMissing = void 0;\n                if (newData) {\n                    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n                        _this.setQuery(queryId, function () { return ({ newData: null }); });\n                    }\n                    data = newData.result;\n                    isMissing = !newData.complete;\n                }\n                else {\n                    var lastError = observableQuery && observableQuery.getLastError();\n                    var errorStatusChanged = errorPolicy !== 'none' &&\n                        (lastError && lastError.graphQLErrors) !==\n                            queryStoreValue.graphQLErrors;\n                    if (lastResult && lastResult.data && !errorStatusChanged) {\n                        data = lastResult.data;\n                        isMissing = false;\n                    }\n                    else {\n                        var diffResult = _this.dataStore.getCache().diff({\n                            query: document,\n                            variables: queryStoreValue.previousVariables ||\n                                queryStoreValue.variables,\n                            returnPartialData: true,\n                            optimistic: true,\n                        });\n                        data = diffResult.result;\n                        isMissing = !diffResult.complete;\n                    }\n                }\n                var stale = isMissing && !(options.returnPartialData ||\n                    fetchPolicy === 'cache-only');\n                var resultFromStore = {\n                    data: stale ? lastResult && lastResult.data : data,\n                    loading: loading,\n                    networkStatus: queryStoreValue.networkStatus,\n                    stale: stale,\n                };\n                if (errorPolicy === 'all' && hasGraphQLErrors) {\n                    resultFromStore.errors = queryStoreValue.graphQLErrors;\n                }\n                invoke('next', resultFromStore);\n            }\n            catch (networkError) {\n                invoke('error', new ApolloError({ networkError: networkError }));\n            }\n        };\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cache = this.dataStore.getCache();\n            var transformed = cache.transformDocument(document);\n            var forLink = removeConnectionDirectiveFromDocument(cache.transformForLink(transformed));\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = this.localState.serverQuery(forLink);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign({}, this.transform(document).defaultVars, variables);\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'standby', 11) : invariant(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n        options.variables = this.getVariables(options.query, options.variables);\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var transformedOptions = __assign({}, options);\n        return new ObservableQuery({\n            queryManager: this,\n            options: transformedOptions,\n            shouldSubscribe: shouldSubscribe,\n        });\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(options.query, 12) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 13) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 14) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 15) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        return new Promise(function (resolve, reject) {\n            var watchedQuery = _this.watchQuery(options, false);\n            _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n            watchedQuery\n                .result()\n                .then(resolve, reject)\n                .then(function () {\n                return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n            });\n        });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.idCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        this.stopPollingQuery(queryId);\n        this.queryStore.stopQuery(queryId);\n        this.invalidate(queryId);\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.setQuery(queryId, function (_a) {\n            var listeners = _a.listeners;\n            listeners.add(listener);\n            return { invalidated: false };\n        });\n    };\n    QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n        var _this = this;\n        var cancel = this.getQuery(queryId).cancel;\n        if (cancel)\n            cancel();\n        var previousResult = function () {\n            var previousResult = null;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            if (observableQuery) {\n                var lastResult = observableQuery.getLastResult();\n                if (lastResult) {\n                    previousResult = lastResult.data;\n                }\n            }\n            return previousResult;\n        };\n        return this.dataStore.getCache().watch({\n            query: document,\n            variables: options.variables,\n            optimistic: true,\n            previousResult: previousResult,\n            callback: function (newData) {\n                _this.setQuery(queryId, function () { return ({ invalidated: true, newData: newData }); });\n            },\n        });\n    };\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n        this.setQuery(queryId, function () { return ({ observableQuery: observableQuery }); });\n    };\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n        var cancel = this.getQuery(queryId).cancel;\n        this.setQuery(queryId, function () { return ({ observableQuery: null }); });\n        if (cancel)\n            cancel();\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(process.env.NODE_ENV === \"production\" ? new InvariantError(16) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n        });\n        var resetIds = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery)\n                resetIds.push(queryId);\n        });\n        this.queryStore.reset(resetIds);\n        this.mutationStore.reset();\n        return this.dataStore.reset();\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery) {\n                var fetchPolicy = observableQuery.options.fetchPolicy;\n                observableQuery.resetLastResults();\n                if (fetchPolicy !== 'cache-only' &&\n                    (includeStandby || fetchPolicy !== 'standby')) {\n                    observableQueryPromises.push(observableQuery.refetch());\n                }\n                _this.setQuery(queryId, function () { return ({ newData: null }); });\n                _this.invalidate(queryId);\n            }\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.observeQuery = function (queryId, options, observer) {\n        this.addQueryListener(queryId, this.queryListenerForObserver(queryId, options, observer));\n        return this.fetchQuery(queryId, options);\n    };\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"The QueryManager.startQuery method has been deprecated\");\n        this.addQueryListener(queryId, listener);\n        this.fetchQuery(queryId, options)\n            .catch(function () { return undefined; });\n        return queryId;\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, variables = _a.variables;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n                if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n                    _this.dataStore.markSubscriptionResult(result, query, variables);\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n        this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n        this.getQuery(queryId).subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n        if (optimistic === void 0) { optimistic = true; }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query, fetchPolicy = _a.fetchPolicy, returnPartialData = _a.returnPartialData;\n        var lastResult = observableQuery.getLastResult();\n        var newData = this.getQuery(observableQuery.queryId).newData;\n        if (newData && newData.complete) {\n            return { data: newData.result, partial: false };\n        }\n        if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n            return { data: undefined, partial: false };\n        }\n        var _b = this.dataStore.getCache().diff({\n            query: query,\n            variables: variables,\n            previousResult: lastResult ? lastResult.data : undefined,\n            returnPartialData: true,\n            optimistic: optimistic,\n        }), result = _b.result, complete = _b.complete;\n        return {\n            data: (complete || returnPartialData) ? result : void 0,\n            partial: !complete,\n        };\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n            process.env.NODE_ENV === \"production\" ? invariant(foundObserveableQuery, 17) : invariant(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            observableQuery = foundObserveableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        return {\n            previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n            variables: variables,\n            document: query,\n        };\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        var _this = this;\n        this.onBroadcast();\n        this.queries.forEach(function (info, id) {\n            if (info.invalidated) {\n                info.listeners.forEach(function (listener) {\n                    if (listener) {\n                        listener(_this.queryStore.get(id), info.newData);\n                    }\n                });\n            }\n        });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        if (deduplication === void 0) { deduplication = this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _a = this, inFlightLinkObservables_1 = _a.inFlightLinkObservables, link = _a.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign({}, context, { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = JSON.stringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));\n                    var cleanup = function () {\n                        byVariables_1.delete(varJson_1);\n                        if (!byVariables_1.size)\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        cleanupSub_1.unsubscribe();\n                    };\n                    var cleanupSub_1 = observable.subscribe({\n                        next: cleanup,\n                        error: cleanup,\n                        complete: cleanup,\n                    });\n                }\n            }\n            else {\n                observable = multiplex(execute(link, operation));\n            }\n        }\n        else {\n            observable = Observable.of({ data: {} });\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;\n        var variables = options.variables, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;\n        var resultFromStore;\n        var errorsFromStore;\n        return new Promise(function (resolve, reject) {\n            var observable = _this.getObservableFromLink(document, options.context, variables);\n            var fqrfId = \"fetchRequest:\" + queryId;\n            _this.fetchQueryRejectFns.set(fqrfId, reject);\n            var cleanup = function () {\n                _this.fetchQueryRejectFns.delete(fqrfId);\n                _this.setQuery(queryId, function (_a) {\n                    var subscriptions = _a.subscriptions;\n                    subscriptions.delete(subscription);\n                });\n            };\n            var subscription = observable.map(function (result) {\n                if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                    _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n                    _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n                    _this.invalidate(queryId);\n                    _this.invalidate(fetchMoreForQueryId);\n                    _this.broadcastQueries();\n                }\n                if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n                    return reject(new ApolloError({\n                        graphQLErrors: result.errors,\n                    }));\n                }\n                if (errorPolicy === 'all') {\n                    errorsFromStore = result.errors;\n                }\n                if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n                    resultFromStore = result.data;\n                }\n                else {\n                    var _a = _this.dataStore.getCache().diff({\n                        variables: variables,\n                        query: document,\n                        optimistic: false,\n                        returnPartialData: true,\n                    }), result_1 = _a.result, complete = _a.complete;\n                    if (complete || options.returnPartialData) {\n                        resultFromStore = result_1;\n                    }\n                }\n            }).subscribe({\n                error: function (error) {\n                    cleanup();\n                    reject(error);\n                },\n                complete: function () {\n                    cleanup();\n                    resolve({\n                        data: resultFromStore,\n                        errors: errorsFromStore,\n                        loading: false,\n                        networkStatus: NetworkStatus.ready,\n                        stale: false,\n                    });\n                },\n            });\n            _this.setQuery(queryId, function (_a) {\n                var subscriptions = _a.subscriptions;\n                subscriptions.add(subscription);\n            });\n        });\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        return (this.queries.get(queryId) || {\n            listeners: new Set(),\n            invalidated: false,\n            document: null,\n            newData: null,\n            lastRequestId: 1,\n            observableQuery: null,\n            subscriptions: new Set(),\n        });\n    };\n    QueryManager.prototype.setQuery = function (queryId, updater) {\n        var prev = this.getQuery(queryId);\n        var newInfo = __assign({}, prev, updater(prev));\n        this.queries.set(queryId, newInfo);\n    };\n    QueryManager.prototype.invalidate = function (queryId, invalidated) {\n        if (invalidated === void 0) { invalidated = true; }\n        if (queryId) {\n            this.setQuery(queryId, function () { return ({ invalidated: invalidated }); });\n        }\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign({}, newContext, { clientAwareness: this.clientAwareness });\n    };\n    QueryManager.prototype.checkInFlight = function (queryId) {\n        var query = this.queryStore.get(queryId);\n        return (query &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n        var _this = this;\n        var pollInterval = options.pollInterval;\n        process.env.NODE_ENV === \"production\" ? invariant(pollInterval, 18) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n        if (!this.ssrMode) {\n            var info = this.pollingInfoByQueryId.get(queryId);\n            if (!info) {\n                this.pollingInfoByQueryId.set(queryId, (info = {}));\n            }\n            info.interval = pollInterval;\n            info.options = __assign({}, options, { fetchPolicy: 'network-only' });\n            var maybeFetch_1 = function () {\n                var info = _this.pollingInfoByQueryId.get(queryId);\n                if (info) {\n                    if (_this.checkInFlight(queryId)) {\n                        poll_1();\n                    }\n                    else {\n                        _this.fetchQuery(queryId, info.options, FetchType.poll).then(poll_1, poll_1);\n                    }\n                }\n            };\n            var poll_1 = function () {\n                var info = _this.pollingInfoByQueryId.get(queryId);\n                if (info) {\n                    clearTimeout(info.timeout);\n                    info.timeout = setTimeout(maybeFetch_1, info.interval);\n                }\n            };\n            if (listener) {\n                this.addQueryListener(queryId, listener);\n            }\n            poll_1();\n        }\n        return queryId;\n    };\n    QueryManager.prototype.stopPollingQuery = function (queryId) {\n        this.pollingInfoByQueryId.delete(queryId);\n    };\n    return QueryManager;\n}());\n\nvar DataStore = (function () {\n    function DataStore(initialCache) {\n        this.cache = initialCache;\n    }\n    DataStore.prototype.getCache = function () {\n        return this.cache;\n    };\n    DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n        if (ignoreErrors === void 0) { ignoreErrors = false; }\n        var writeWithErrors = !graphQLResultHasError(result);\n        if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n            writeWithErrors = true;\n        }\n        if (!fetchMoreForQueryId && writeWithErrors) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n        if (!graphQLResultHasError(result)) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_SUBSCRIPTION',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markMutationInit = function (mutation) {\n        var _this = this;\n        if (mutation.optimisticResponse) {\n            var optimistic_1;\n            if (typeof mutation.optimisticResponse === 'function') {\n                optimistic_1 = mutation.optimisticResponse(mutation.variables);\n            }\n            else {\n                optimistic_1 = mutation.optimisticResponse;\n            }\n            this.cache.recordOptimisticTransaction(function (c) {\n                var orig = _this.cache;\n                _this.cache = c;\n                try {\n                    _this.markMutationResult({\n                        mutationId: mutation.mutationId,\n                        result: { data: optimistic_1 },\n                        document: mutation.document,\n                        variables: mutation.variables,\n                        updateQueries: mutation.updateQueries,\n                        update: mutation.update,\n                    });\n                }\n                finally {\n                    _this.cache = orig;\n                }\n            }, mutation.mutationId);\n        }\n    };\n    DataStore.prototype.markMutationResult = function (mutation) {\n        var _this = this;\n        if (!graphQLResultHasError(mutation.result)) {\n            var cacheWrites_1 = [{\n                    result: mutation.result.data,\n                    dataId: 'ROOT_MUTATION',\n                    query: mutation.document,\n                    variables: mutation.variables,\n                }];\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                Object.keys(updateQueries_1).forEach(function (id) {\n                    var _a = updateQueries_1[id], query = _a.query, updater = _a.updater;\n                    var _b = _this.cache.diff({\n                        query: query.document,\n                        variables: query.variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _b.result, complete = _b.complete;\n                    if (complete) {\n                        var nextQueryResult = tryFunctionOrLogError(function () {\n                            return updater(currentQueryResult, {\n                                mutationResult: mutation.result,\n                                queryName: getOperationName(query.document) || undefined,\n                                queryVariables: query.variables,\n                            });\n                        });\n                        if (nextQueryResult) {\n                            cacheWrites_1.push({\n                                result: nextQueryResult,\n                                dataId: 'ROOT_QUERY',\n                                query: query.document,\n                                variables: query.variables,\n                            });\n                        }\n                    }\n                });\n            }\n            this.cache.performTransaction(function (c) {\n                cacheWrites_1.forEach(function (write) { return c.write(write); });\n                var update = mutation.update;\n                if (update) {\n                    tryFunctionOrLogError(function () { return update(c, mutation.result); });\n                }\n            });\n        }\n    };\n    DataStore.prototype.markMutationComplete = function (_a) {\n        var mutationId = _a.mutationId, optimisticResponse = _a.optimisticResponse;\n        if (optimisticResponse) {\n            this.cache.removeOptimistic(mutationId);\n        }\n    };\n    DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n        this.cache.write({\n            result: newResult,\n            dataId: 'ROOT_QUERY',\n            variables: variables,\n            query: document,\n        });\n    };\n    DataStore.prototype.reset = function () {\n        return this.cache.reset();\n    };\n    return DataStore;\n}());\n\nvar version = \"2.6.4\";\n\nvar hasSuggestedDevtools = false;\nvar ApolloClient = (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.defaultOptions = {};\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        var cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, _d = options.assumeImmutableResults, assumeImmutableResults = _d === void 0 ? false : _d, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link && resolvers) {\n            link = ApolloLink.empty();\n        }\n        if (!link || !cache) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\\n\" +\n                \"These options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\\n\" +\n                \"For more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup\");\n        }\n        this.link = link;\n        this.cache = cache;\n        this.store = new DataStore(cache);\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || {};\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' &&\n            typeof window !== 'undefined' &&\n            !window.__APOLLO_CLIENT__;\n        if (typeof connectToDevTools === 'undefined'\n            ? defaultConnectToDevTools\n            : connectToDevTools && typeof window !== 'undefined') {\n            window.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n            hasSuggestedDevtools = true;\n            if (typeof window !== 'undefined' &&\n                window.document &&\n                window.top === window.self) {\n                if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n                    if (window.navigator &&\n                        window.navigator.userAgent &&\n                        window.navigator.userAgent.indexOf('Chrome') > -1) {\n                        console.debug('Download the Apollo DevTools ' +\n                            'for a better development experience: ' +\n                            'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n                    }\n                }\n            }\n        }\n        this.version = version;\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n        this.queryManager = new QueryManager({\n            link: this.link,\n            store: this.store,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion,\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: function () {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.queryStore.getStore(),\n                            mutations: _this.queryManager.mutationStore.getStore(),\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true),\n                    });\n                }\n            },\n        });\n    }\n    ApolloClient.prototype.stop = function () {\n        this.queryManager.stop();\n    };\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = __assign({}, this.defaultOptions.watchQuery, options);\n        }\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = __assign({}, this.defaultOptions.query, options);\n        }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network', 2) : invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' +\n            'client.query can only return a single result. Please use client.watchQuery ' +\n            'to receive multiple results from the cache and the network, or consider ' +\n            'using a different fetchPolicy, such as cache-first or network-only.');\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = __assign({}, this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readQuery(options, optimistic);\n    };\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readFragment(options, optimistic);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        var result = this.cache.writeQuery(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        var result = this.cache.writeFragment(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeData = function (options) {\n        var result = this.cache.writeData(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    ApolloClient.prototype.initQueryManager = function () {\n        process.env.NODE_ENV === \"production\" || invariant.warn('Calling the initQueryManager method is no longer necessary, ' +\n            'and it will be removed from ApolloClient in version 3.0.');\n        return this.queryManager;\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore(); })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () { return _this.reFetchObservableQueries(); });\n    };\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore(); })\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    return ApolloClient;\n}());\n\nexport default ApolloClient;\nexport { ApolloClient, ApolloError, FetchType, NetworkStatus, ObservableQuery, isApolloError };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}