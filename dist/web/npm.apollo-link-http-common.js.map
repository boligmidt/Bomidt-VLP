{"version":3,"sources":["webpack:///./node_modules/apollo-link-http-common/lib/bundle.esm.js"],"names":["fallbackHttpConfig","http","includeQuery","includeExtensions","headers","accept","options","method","throwServerError","response","result","message","error","Error","name","statusCode","status","parseAndCheckHttpResponse","operations","text","then","bodyText","JSON","parse","err","parseError","Promise","reject","Array","isArray","hasOwnProperty","map","op","operationName","checkFetcher","fetcher","fetch","window","createSignalIfSupported","AbortController","controller","signal","selectHttpOptionsAndBody","operation","fallbackConfig","configs","_i","arguments","length","credentials","forEach","config","extensions","variables","query","body","serializeFetchParameter","p","label","serialized","stringify","e","selectURI","fallbackURI","contextURI","getContext","uri"],"mappings":"0FAAA,yQAeIA,EAAqB,CACrBC,KAZqB,CACrBC,cAAc,EACdC,mBAAmB,GAWnBC,QATiB,CACjBC,OAAQ,MACR,eAAgB,oBAQhBC,QANiB,CACjBC,OAAQ,SAORC,EAAmB,SAAUC,EAAUC,EAAQC,GAC/C,IAAIC,EAAQ,IAAIC,MAAMF,GAKtB,MAJAC,EAAME,KAAO,cACbF,EAAMH,SAAWA,EACjBG,EAAMG,WAAaN,EAASO,OAC5BJ,EAAMF,OAASA,EACTE,GAENK,EAA4B,SAAUC,GAAc,OAAO,SAAUT,GACrE,OAAQA,EACHU,OACAC,MAAK,SAAUC,GAChB,IACI,OAAOC,KAAKC,MAAMF,GAEtB,MAAOG,GACH,IAAIC,EAAaD,EAKjB,OAJAC,EAAWX,KAAO,mBAClBW,EAAWhB,SAAWA,EACtBgB,EAAWV,WAAaN,EAASO,OACjCS,EAAWJ,SAAWA,EACfK,QAAQC,OAAOF,OAGzBL,MAAK,SAAUV,GAWhB,OAVID,EAASO,QAAU,KACnBR,EAAiBC,EAAUC,EAAQ,iDAAmDD,EAASO,QAE9FY,MAAMC,QAAQnB,IACdA,EAAOoB,eAAe,SACtBpB,EAAOoB,eAAe,WACvBtB,EAAiBC,EAAUC,EAAQ,2CAA6CkB,MAAMC,QAAQX,GACxFA,EAAWa,KAAI,SAAUC,GAAM,OAAOA,EAAGC,iBACzCf,EAAWe,eAAiB,MAE/BvB,OAGXwB,EAAe,SAAUC,GACzB,IAAKA,GAA4B,oBAAVC,MAAuB,CAI1C,KAFsB,oBAAXC,QACG,aACgC,IAAI,IAAe,KAGrEC,EAA0B,WAC1B,GAA+B,oBAApBC,gBACP,MAAO,CAAEC,YAAY,EAAOC,QAAQ,GACxC,IAAID,EAAa,IAAID,gBAErB,MAAO,CAAEC,WAAYA,EAAYC,OADpBD,EAAWC,SAGxBC,EAA2B,SAAUC,EAAWC,GAEhD,IADA,IAAIC,EAAU,GACLC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAQC,EAAK,GAAKC,UAAUD,GAEhC,IAAIxC,EAAU,YAAS,GAAIsC,EAAetC,QAAS,CAAEF,QAASwC,EAAexC,QAAS6C,YAAaL,EAAeK,cAC9GhD,EAAO2C,EAAe3C,KAC1B4C,EAAQK,SAAQ,SAAUC,GACtB7C,EAAU,YAAS,GAAIA,EAAS6C,EAAO7C,QAAS,CAAEF,QAAS,YAAS,GAAIE,EAAQF,QAAS+C,EAAO/C,WAC5F+C,EAAOF,cACP3C,EAAQ2C,YAAcE,EAAOF,aACjChD,EAAO,YAAS,GAAIA,EAAMkD,EAAOlD,SAErC,IAAIgC,EAAgBU,EAAUV,cAAemB,EAAaT,EAAUS,WAAYC,EAAYV,EAAUU,UAAWC,EAAQX,EAAUW,MAC/HC,EAAO,CAAEtB,cAAeA,EAAeoB,UAAWA,GAKtD,OAJIpD,EAAKE,oBACLoD,EAAKH,WAAaA,GAClBnD,EAAKC,eACLqD,EAAKD,MAAQ,YAAMA,IAChB,CACHhD,QAASA,EACTiD,KAAMA,IAGVC,EAA0B,SAAUC,EAAGC,GACvC,IAAIC,EACJ,IACIA,EAAarC,KAAKsC,UAAUH,GAEhC,MAAOI,GACH,IAAIpC,EAAqD,IAAI,IAAe,GAE5E,MADAA,EAAWA,WAAaoC,EAClBpC,EAEV,OAAOkC,GAEPG,EAAY,SAAUnB,EAAWoB,GACjC,IACIC,EADUrB,EAAUsB,aACCC,IACzB,OAAIF,IAG4B,mBAAhBD,EACLA,EAAYpB,GAGZoB,GAAe","file":"npm.apollo-link-http-common.js","sourcesContent":["import { __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { InvariantError } from 'ts-invariant';\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n};\nvar defaultHeaders = {\n    accept: '*/*',\n    'content-type': 'application/json',\n};\nvar defaultOptions = {\n    method: 'POST',\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nvar throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.name = 'ServerError';\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\nvar parseAndCheckHttpResponse = function (operations) { return function (response) {\n    return (response\n        .text()\n        .then(function (bodyText) {\n        try {\n            return JSON.parse(bodyText);\n        }\n        catch (err) {\n            var parseError = err;\n            parseError.name = 'ServerParseError';\n            parseError.response = response;\n            parseError.statusCode = response.status;\n            parseError.bodyText = bodyText;\n            return Promise.reject(parseError);\n        }\n    })\n        .then(function (result) {\n        if (response.status >= 300) {\n            throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n        }\n        if (!Array.isArray(result) &&\n            !result.hasOwnProperty('data') &&\n            !result.hasOwnProperty('errors')) {\n            throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations)\n                ? operations.map(function (op) { return op.operationName; })\n                : operations.operationName) + \"'.\");\n        }\n        return result;\n    }));\n}; };\nvar checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === 'undefined') {\n        var library = 'unfetch';\n        if (typeof window === 'undefined')\n            library = 'node-fetch';\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n    }\n};\nvar createSignalIfSupported = function () {\n    if (typeof AbortController === 'undefined')\n        return { controller: false, signal: false };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return { controller: controller, signal: signal };\n};\nvar selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = __assign({}, fallbackConfig.options, { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });\n    var http = fallbackConfig.http;\n    configs.forEach(function (config) {\n        options = __assign({}, options, config.options, { headers: __assign({}, options.headers, config.headers) });\n        if (config.credentials)\n            options.credentials = config.credentials;\n        http = __assign({}, http, config.http);\n    });\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    if (http.includeQuery)\n        body.query = print(query);\n    return {\n        options: options,\n        body: body,\n    };\n};\nvar serializeFetchParameter = function (p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    }\n    catch (e) {\n        var parseError = process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n};\nvar selectURI = function (operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    }\n    else if (typeof fallbackURI === 'function') {\n        return fallbackURI(operation);\n    }\n    else {\n        return fallbackURI || '/graphql';\n    }\n};\n\nexport { checkFetcher, createSignalIfSupported, fallbackHttpConfig, parseAndCheckHttpResponse, selectHttpOptionsAndBody, selectURI, serializeFetchParameter, throwServerError };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}