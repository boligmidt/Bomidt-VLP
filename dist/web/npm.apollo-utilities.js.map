{"version":3,"sources":["webpack:///./node_modules/apollo-utilities/lib/bundle.esm.js"],"names":["valueToObjectRepresentation","argObj","name","value","variables","kind","isIntValue","isFloatValue","Number","isBooleanValue","isStringValue","isObjectValue","nestedArgObj_1","fields","map","obj","isVariable","variableValue","isListValue","values","listValue","nestedArgArrayObj","isEnumValue","isNullValue","storeKeyNameFromField","field","directivesObj","directives","forEach","directive","arguments","_a","length","getStoreKeyName","KNOWN_DIRECTIVES","fieldName","args","filterKeys","sort","queryArgs_1","filteredArgs_1","key","JSON","stringify","completeFieldName","stringifiedArgs","Object","keys","indexOf","argumentsObjectFromField","argObj_1","resultKeyNameFromField","alias","isField","selection","isInlineFragment","isIdValue","idObject","type","generated","toIdValue","idConfig","id","typename","undefined","isJsonValue","jsonObject","getDirectiveInfoFromField","directiveObj_1","shouldInclude","filter","isInclusionDirective","directiveArguments","ifArgument","ifValue","every","evaledValue","hasDirectives","names","doc","Directive","node","push","getDirectiveNames","some","hasClientExports","document","getFragmentQueryDocument","fragmentName","actualFragmentName","fragments","definitions","definition","operation","selectionSet","selections","concat","assign","target","sources","_i","source","checkDocument","operations","d","getOperationDefinition","getOperationName","x","getFragmentDefinitions","getQueryDefinition","queryDef","getMainDefinition","queryDoc","fragmentDefinition","createFragmentMap","symTable","fragment","getDefaultValues","variableDefinitions","defaultValues","defaultValue","variable","defaultValueObj","apply","filterInPlace","array","test","context","elem","i","call","this","TYPENAME_FIELD","nullIfDocIsEmpty","isEmpty","op","fragmentDef","getFragmentDefinition","getDirectiveMatcher","dir","removeDirectivesFromDocument","variablesInUse","create","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","Variable","enter","_key","parent","Field","remove","arg","getAllFragmentSpreadsFromSelectionSet","allFragments","frag","FragmentSpread","v","config","argMatcher","argument","aConfig","getArgumentMatcher","OperationDefinition","varDef","argConfig","argMatchCount_1","Argument","removeArgumentsFromDocument","fs","def","FragmentDefinition","removeFragmentSpreadFromDocument","addTypenameToDocument","SelectionSet","lastIndexOf","connectionRemoveConfig","willRemove","removeConnectionDirectiveFromDocument","buildQueryFromSelectionSet","removeClientSetsFromDocument","canUseWeakMap","WeakMap","navigator","product","toString","prototype","cloneDeep","cloneDeepHelper","val","seen","has","get","copy_1","slice","set","child","copy_2","getPrototypeOf","Map","isEnv","env","process","isProduction","isTest","tryFunctionOrLogError","f","e","console","error","graphQLResultHasError","result","errors","maybeDeepFreeze","Symbol","deepFreeze","o","freeze","getOwnPropertyNames","prop","isFrozen","hasOwnProperty","mergeDeep","mergeDeepArray","count","pastCopies","shallowCopyForMerge","mergeHelper","isObject","isExtensible","sourceKey","sourceValue","targetValue","Array","isArray","__proto__"],"mappings":"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","file":"npm.apollo-utilities.js","sourcesContent":["import { visit } from 'graphql/language/visitor';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { __assign } from 'tslib';\nimport stringify from 'fast-json-stable-stringify';\nexport { equal as isEqual } from '@wry/equality';\n\nfunction isScalarValue(value) {\n    return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\nfunction isNumberValue(value) {\n    return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n    return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n    return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n    return value.kind === 'NullValue';\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(17) : new InvariantError(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" +\n            'is not supported. Use variables instead of inline arguments to ' +\n            'overcome this limitation.');\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    'connection',\n    'include',\n    'skip',\n    'client',\n    'rest',\n    'export',\n];\nfunction getStoreKeyName(fieldName, args, directives) {\n    if (directives &&\n        directives['connection'] &&\n        directives['connection']['key']) {\n        if (directives['connection']['filter'] &&\n            directives['connection']['filter'].length > 0) {\n            var filterKeys = directives['connection']['filter']\n                ? directives['connection']['filter']\n                : [];\n            filterKeys.sort();\n            var queryArgs_1 = args;\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = queryArgs_1[key];\n            });\n            return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n        }\n        else {\n            return directives['connection']['key'];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = stringify(args);\n        completeFieldName += \"(\" + stringifiedArgs + \")\";\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n            }\n            else {\n                completeFieldName += \"@\" + key;\n            }\n        });\n    }\n    return completeFieldName;\n}\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction isField(selection) {\n    return selection.kind === 'Field';\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\nfunction isIdValue(idObject) {\n    return idObject &&\n        idObject.type === 'id' &&\n        typeof idObject.generated === 'boolean';\n}\nfunction toIdValue(idConfig, generated) {\n    if (generated === void 0) { generated = false; }\n    return __assign({ type: 'id', generated: generated }, (typeof idConfig === 'string'\n        ? { id: idConfig, typename: undefined }\n        : idConfig));\n}\nfunction isJsonValue(jsonObject) {\n    return (jsonObject != null &&\n        typeof jsonObject === 'object' &&\n        jsonObject.type === 'json');\n}\nfunction defaultValueFromVariable(node) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(18) : new InvariantError(\"Variable nodes are not supported by valueFromNode\");\n}\nfunction valueFromNode(node, onVariable) {\n    if (onVariable === void 0) { onVariable = defaultValueFromVariable; }\n    switch (node.kind) {\n        case 'Variable':\n            return onVariable(node);\n        case 'NullValue':\n            return null;\n        case 'IntValue':\n            return parseInt(node.value, 10);\n        case 'FloatValue':\n            return parseFloat(node.value);\n        case 'ListValue':\n            return node.values.map(function (v) { return valueFromNode(v, onVariable); });\n        case 'ObjectValue': {\n            var value = {};\n            for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n                var field = _a[_i];\n                value[field.name.value] = valueFromNode(field.value, onVariable);\n            }\n            return value;\n        }\n        default:\n            return node.value;\n    }\n}\n\nfunction getDirectiveInfoFromField(field, variables) {\n    if (field.directives && field.directives.length) {\n        var directiveObj_1 = {};\n        field.directives.forEach(function (directive) {\n            directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);\n        });\n        return directiveObj_1;\n    }\n    return null;\n}\nfunction shouldInclude(selection, variables) {\n    if (variables === void 0) { variables = {}; }\n    return getInclusionDirectives(selection.directives).every(function (_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === 'Variable') {\n            evaledValue = variables[ifArgument.value.name.value];\n            process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0, 3) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n        }\n        else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n    });\n}\nfunction getDirectiveNames(doc) {\n    var names = [];\n    visit(doc, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nfunction hasDirectives(names, doc) {\n    return getDirectiveNames(doc).some(function (name) { return names.indexOf(name) > -1; });\n}\nfunction hasClientExports(document) {\n    return (document &&\n        hasDirectives(['client'], document) &&\n        hasDirectives(['export'], document));\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === 'skip' || value === 'include';\n}\nfunction getInclusionDirectives(directives) {\n    return directives ? directives.filter(isInclusionDirective).map(function (directive) {\n        var directiveArguments = directive.arguments;\n        var directiveName = directive.name.value;\n        process.env.NODE_ENV === \"production\" ? invariant(directiveArguments && directiveArguments.length === 1, 4) : invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        var ifArgument = directiveArguments[0];\n        process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if', 5) : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n        var ifValue = ifArgument.value;\n        process.env.NODE_ENV === \"production\" ? invariant(ifValue &&\n            (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 6) : invariant(ifValue &&\n            (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n        return { directive: directive, ifArgument: ifArgument };\n    }) : [];\n}\n\nfunction getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1, 2) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign({}, document, { definitions: [\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ].concat(document.definitions) });\n    return query;\n}\n\nfunction assign(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) {\n        if (typeof source === 'undefined' || source === null) {\n            return;\n        }\n        Object.keys(source).forEach(function (key) {\n            target[key] = source[key];\n        });\n    });\n    return target;\n}\n\nfunction getMutationDefinition(doc) {\n    checkDocument(doc);\n    var mutationDef = doc.definitions.filter(function (definition) {\n        return definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation';\n    })[0];\n    process.env.NODE_ENV === \"production\" ? invariant(mutationDef, 7) : invariant(mutationDef, 'Must contain a mutation definition.');\n    return mutationDef;\n}\nfunction checkDocument(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc && doc.kind === 'Document', 8) : invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(9) : new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    process.env.NODE_ENV === \"production\" ? invariant(operations.length <= 1, 10) : invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nfunction getOperationDefinitionOrDie(document) {\n    var def = getOperationDefinition(document);\n    process.env.NODE_ENV === \"production\" ? invariant(def, 11) : invariant(def, \"GraphQL document is missing an operation\");\n    return def;\n}\nfunction getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    process.env.NODE_ENV === \"production\" ? invariant(queryDef && queryDef.operation === 'query', 12) : invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc.kind === 'Document', 13) : invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    process.env.NODE_ENV === \"production\" ? invariant(doc.definitions.length <= 1, 14) : invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n    var fragmentDef = doc.definitions[0];\n    process.env.NODE_ENV === \"production\" ? invariant(fragmentDef.kind === 'FragmentDefinition', 15) : invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n    return fragmentDef;\n}\nfunction getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(16) : new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getDefaultValues(definition) {\n    if (definition &&\n        definition.variableDefinitions &&\n        definition.variableDefinitions.length) {\n        var defaultValues = definition.variableDefinitions\n            .filter(function (_a) {\n            var defaultValue = _a.defaultValue;\n            return defaultValue;\n        })\n            .map(function (_a) {\n            var variable = _a.variable, defaultValue = _a.defaultValue;\n            var defaultValueObj = {};\n            valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n            return defaultValueObj;\n        });\n        return assign.apply(void 0, [{}].concat(defaultValues));\n    }\n    return {};\n}\nfunction variablesInOperation(operation) {\n    var names = new Set();\n    if (operation.variableDefinitions) {\n        for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n            var definition = _a[_i];\n            names.add(definition.variable.name.value);\n        }\n    }\n    return names;\n}\n\nfunction filterInPlace(array, test, context) {\n    var target = 0;\n    array.forEach(function (elem, i) {\n        if (test.call(this, elem, i, array)) {\n            array[target++] = elem;\n        }\n    }, context);\n    array.length = target;\n    return array;\n}\n\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragments) {\n    return op.selectionSet.selections.every(function (selection) {\n        return selection.kind === 'FragmentSpread' &&\n            isEmpty(fragments[selection.name.value], fragments);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))\n        ? null\n        : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            return (dir.name && dir.name === directive.name.value) ||\n                (dir.test && dir.test(directive));\n        });\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    var variablesInUse = Object.create(null);\n    var variablesToRemove = [];\n    var fragmentSpreadsInUse = Object.create(null);\n    var fragmentSpreadsToRemove = [];\n    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n        Variable: {\n            enter: function (node, _key, parent) {\n                if (parent.kind !== 'VariableDefinition') {\n                    variablesInUse[node.name.value] = true;\n                }\n            },\n        },\n        Field: {\n            enter: function (node) {\n                if (directives && node.directives) {\n                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });\n                    if (shouldRemoveField &&\n                        node.directives &&\n                        node.directives.some(getDirectiveMatcher(directives))) {\n                        if (node.arguments) {\n                            node.arguments.forEach(function (arg) {\n                                if (arg.value.kind === 'Variable') {\n                                    variablesToRemove.push({\n                                        name: arg.value.name.value,\n                                    });\n                                }\n                            });\n                        }\n                        if (node.selectionSet) {\n                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                                fragmentSpreadsToRemove.push({\n                                    name: frag.name.value,\n                                });\n                            });\n                        }\n                        return null;\n                    }\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node) {\n                fragmentSpreadsInUse[node.name.value] = true;\n            },\n        },\n        Directive: {\n            enter: function (node) {\n                if (getDirectiveMatcher(directives)(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n    if (modifiedDoc &&\n        filterInPlace(variablesToRemove, function (v) { return !variablesInUse[v.name]; }).length) {\n        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n    }\n    if (modifiedDoc &&\n        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !fragmentSpreadsInUse[fs.name]; })\n            .length) {\n        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n    }\n    return modifiedDoc;\n}\nfunction addTypenameToDocument(doc) {\n    return visit(checkDocument(doc), {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === 'OperationDefinition') {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (isField(selection) &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                var field = parent;\n                if (isField(field) &&\n                    field.directives &&\n                    field.directives.some(function (d) { return d.name.value === 'export'; })) {\n                    return;\n                }\n                return __assign({}, node, { selections: selections.concat([TYPENAME_FIELD]) });\n            },\n        },\n    });\n}\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                process.env.NODE_ENV === \"production\" || invariant.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!isField(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getDirectivesFromDocument(directives, doc) {\n    checkDocument(doc);\n    var parentPath;\n    return nullIfDocIsEmpty(visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, _parent, path) {\n                var currentPath = path.join('-');\n                if (!parentPath ||\n                    currentPath === parentPath ||\n                    !currentPath.startsWith(parentPath)) {\n                    if (node.selections) {\n                        var selectionsWithDirectives = node.selections.filter(function (selection) { return hasDirectivesInSelection(directives, selection); });\n                        if (hasDirectivesInSelectionSet(directives, node, false)) {\n                            parentPath = currentPath;\n                        }\n                        return __assign({}, node, { selections: selectionsWithDirectives });\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            },\n        },\n    }));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === 'Variable' &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign({}, node, { variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                    }) });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    node.arguments.forEach(function (arg) {\n                        if (argMatcher(arg)) {\n                            argMatchCount_1 += 1;\n                        }\n                    });\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n    var allFragments = [];\n    selectionSet.selections.forEach(function (selection) {\n        if ((isField(selection) || isInlineFragment(selection)) &&\n            selection.selectionSet) {\n            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            allFragments.push(selection);\n        }\n    });\n    return allFragments;\n}\nfunction buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === 'query') {\n        return document;\n    }\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign({}, node, { operation: 'query' });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nfunction removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === 'client'; },\n            remove: true,\n        },\n    ], document);\n    if (modifiedDoc) {\n        modifiedDoc = visit(modifiedDoc, {\n            FragmentDefinition: {\n                enter: function (node) {\n                    if (node.selectionSet) {\n                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n                            return isField(selection) && selection.name.value === '__typename';\n                        });\n                        if (isTypenameOnly) {\n                            return null;\n                        }\n                    }\n                },\n            },\n        });\n    }\n    return modifiedDoc;\n}\n\nvar canUseWeakMap = typeof WeakMap === 'function' && !(typeof navigator === 'object' &&\n    navigator.product === 'ReactNative');\n\nvar toString = Object.prototype.toString;\nfunction cloneDeep(value) {\n    return cloneDeepHelper(value, new Map());\n}\nfunction cloneDeepHelper(val, seen) {\n    switch (toString.call(val)) {\n        case \"[object Array]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_1 = val.slice(0);\n            seen.set(val, copy_1);\n            copy_1.forEach(function (child, i) {\n                copy_1[i] = cloneDeepHelper(child, seen);\n            });\n            return copy_1;\n        }\n        case \"[object Object]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_2 = Object.create(Object.getPrototypeOf(val));\n            seen.set(val, copy_2);\n            Object.keys(val).forEach(function (key) {\n                copy_2[key] = cloneDeepHelper(val[key], seen);\n            });\n            return copy_2;\n        }\n        default:\n            return val;\n    }\n}\n\nfunction getEnv() {\n    if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n        return process.env.NODE_ENV;\n    }\n    return 'development';\n}\nfunction isEnv(env) {\n    return getEnv() === env;\n}\nfunction isProduction() {\n    return isEnv('production') === true;\n}\nfunction isDevelopment() {\n    return isEnv('development') === true;\n}\nfunction isTest() {\n    return isEnv('test') === true;\n}\n\nfunction tryFunctionOrLogError(f) {\n    try {\n        return f();\n    }\n    catch (e) {\n        if (console.error) {\n            console.error(e);\n        }\n    }\n}\nfunction graphQLResultHasError(result) {\n    return result.errors && result.errors.length;\n}\n\nfunction deepFreeze(o) {\n    Object.freeze(o);\n    Object.getOwnPropertyNames(o).forEach(function (prop) {\n        if (o[prop] !== null &&\n            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n            !Object.isFrozen(o[prop])) {\n            deepFreeze(o[prop]);\n        }\n    });\n    return o;\n}\nfunction maybeDeepFreeze(obj) {\n    if (isDevelopment() || isTest()) {\n        var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';\n        if (!symbolIsPolyfilled) {\n            return deepFreeze(obj);\n        }\n    }\n    return obj;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var pastCopies = [];\n        target = shallowCopyForMerge(target, pastCopies);\n        for (var i = 1; i < count; ++i) {\n            target = mergeHelper(target, sources[i], pastCopies);\n        }\n    }\n    return target;\n}\nfunction isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n}\nfunction mergeHelper(target, source, pastCopies) {\n    if (isObject(source) && isObject(target)) {\n        if (Object.isExtensible && !Object.isExtensible(target)) {\n            target = shallowCopyForMerge(target, pastCopies);\n        }\n        Object.keys(source).forEach(function (sourceKey) {\n            var sourceValue = source[sourceKey];\n            if (hasOwnProperty.call(target, sourceKey)) {\n                var targetValue = target[sourceKey];\n                if (sourceValue !== targetValue) {\n                    target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);\n                }\n            }\n            else {\n                target[sourceKey] = sourceValue;\n            }\n        });\n        return target;\n    }\n    return source;\n}\nfunction shallowCopyForMerge(value, pastCopies) {\n    if (value !== null &&\n        typeof value === 'object' &&\n        pastCopies.indexOf(value) < 0) {\n        if (Array.isArray(value)) {\n            value = value.slice(0);\n        }\n        else {\n            value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n        }\n        pastCopies.push(value);\n    }\n    return value;\n}\n\nvar haveWarned = Object.create({});\nfunction warnOnceInDevelopment(msg, type) {\n    if (type === void 0) { type = 'warn'; }\n    if (!isProduction() && !haveWarned[msg]) {\n        if (!isTest()) {\n            haveWarned[msg] = true;\n        }\n        if (type === 'error') {\n            console.error(msg);\n        }\n        else {\n            console.warn(msg);\n        }\n    }\n}\n\nfunction stripSymbols(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n\nexport { addTypenameToDocument, argumentsObjectFromField, assign, buildQueryFromSelectionSet, canUseWeakMap, checkDocument, cloneDeep, createFragmentMap, getDefaultValues, getDirectiveInfoFromField, getDirectiveNames, getDirectivesFromDocument, getEnv, getFragmentDefinition, getFragmentDefinitions, getFragmentQueryDocument, getInclusionDirectives, getMainDefinition, getMutationDefinition, getOperationDefinition, getOperationDefinitionOrDie, getOperationName, getQueryDefinition, getStoreKeyName, graphQLResultHasError, hasClientExports, hasDirectives, isDevelopment, isEnv, isField, isIdValue, isInlineFragment, isJsonValue, isNumberValue, isProduction, isScalarValue, isTest, maybeDeepFreeze, mergeDeep, mergeDeepArray, removeArgumentsFromDocument, removeClientSetsFromDocument, removeConnectionDirectiveFromDocument, removeDirectivesFromDocument, removeFragmentSpreadFromDocument, resultKeyNameFromField, shouldInclude, storeKeyNameFromField, stripSymbols, toIdValue, tryFunctionOrLogError, valueFromNode, valueToObjectRepresentation, variablesInOperation, warnOnceInDevelopment };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}