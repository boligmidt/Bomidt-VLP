{"version":3,"sources":["webpack:///./node_modules/apollo-link-http/lib/bundle.esm.js"],"names":["createHttpLink","linkOptions","_a","uri","fetcher","fetch","includeExtensions","useGETForQueries","requestOptions","linkConfig","http","options","fetchOptions","credentials","headers","operation","chosenURI","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","name","version","controller","contextHeaders","contextConfig","_b","body","signal","_c","_controller","query","definitions","some","d","kind","method","_d","queryParams","addQueryParam","key","value","push","encodeURIComponent","operationName","variables","serializedVariables","parseError","extensions","serializedExtensions","fragment","preFragment","fragmentStart","indexOf","substr","queryParamsPrefix","newURI","join","rewriteURIForGET","observer","then","response","setContext","result","next","complete","catch","err","errors","data","error","abort","HttpLink","_super","opts","call","this","request"],"mappings":"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","file":"npm.apollo-link-http.js","sourcesContent":["import { __rest, __assign, __extends } from 'tslib';\nimport { ApolloLink, fromError, Observable } from 'apollo-link';\nimport { checkFetcher, selectURI, selectHttpOptionsAndBody, fallbackHttpConfig, createSignalIfSupported, serializeFetchParameter, parseAndCheckHttpResponse } from 'apollo-link-http-common';\n\nvar createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n    checkFetcher(fetcher);\n    if (!fetcher) {\n        fetcher = fetch;\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            fetcher(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(parseAndCheckHttpResponse(operation))\n                .then(function (result) {\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                if (err.name === 'AbortError')\n                    return;\n                if (err.result && err.result.errors && err.result.data) {\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\nfunction rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(key + \"=\" + encodeURIComponent(value));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\nvar HttpLink = (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(opts) {\n        return _super.call(this, createHttpLink(opts).request) || this;\n    }\n    return HttpLink;\n}(ApolloLink));\n\nexport { HttpLink, createHttpLink };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}